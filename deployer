<?php
namespace Deployer;

require 'recipe/common.php';

set('repository', 'git@git.rep.elt:Phalcon/landing.git');

host('php.elt')
   ->user('default')
   ->port(22)
   ->identityFile('~/.ssh/id_rsa')
   ->set('deploy_path', '/www/htdocs/team2');

// Laravel shared dirs
set('shared_dirs', [
   'storage',
]);
// Laravel shared file
set('shared_files', [
   '.env',
]);
set('branch', 'master');
set('tag', function () {
   $cmd = 'git ls-remote --tags --refs {{repository}}';
//    $output = runLocally($cmd);
   $output = run($cmd);
   $tags = preg_split('#$#m', $output);
   $tags = array_map(
      function ($x) {
         $tt = explode('/', $x);
         return $tt[count($tt) - 1];
      },
      $tags);
   natsort($tags);
   $tags = array_values($tags);
   return count($tags) ? $tags[count($tags) - 1] : null;
});
// Laravel writable dirs
set('writable_dirs', [
   'bootstrap/cache',
   'storage',
   'storage/app',
   'storage/app/public',
   'storage/framework',
   'storage/framework/cache',
   'storage/framework/sessions',
   'storage/framework/views',
   'storage/logs',
]);
set('laravel_version', function () {
   $result = run('{{bin/php}} {{release_path}}/artisan --version');
   preg_match_all('/(\d+\.?)+/', $result, $matches);
   $version = $matches[0][0] ?? 5.6;
   return $version;
});
/**
 * Helper tasks
 */
desc('Disable maintenance mode');
task('artisan:up', function () {
   $output = run('if [ -f {{deploy_path}}/current/artisan ]; then {{bin/php}} {{deploy_path}}/current/artisan up; fi');
   writeln('<info>' . $output . '</info>');
});
desc('Enable maintenance mode');
task('artisan:down', function () {
   $output = run('if [ -f {{deploy_path}}/current/artisan ]; then {{bin/php}} {{deploy_path}}/current/artisan down; fi');
   writeln('<info>' . $output . '</info>');
});
desc('Execute artisan migrate');
task('artisan:migrate', function () {
   run('{{bin/php}} {{release_path}}/artisan migrate --force');
});
desc('Execute artisan migrate:fresh');
task('artisan:migrate:fresh', function () {
   run('{{bin/php}} {{release_path}}/artisan migrate:fresh --force');
});
desc('Execute artisan migrate:rollback');
task('artisan:migrate:rollback', function () {
   $output = run('{{bin/php}} {{release_path}}/artisan migrate:rollback --force');
   writeln('<info>' . $output . '</info>');
});
desc('Execute artisan migrate:status');
task('artisan:migrate:status', function () {
   $output = run('{{bin/php}} {{release_path}}/artisan migrate:status');
   writeln('<info>' . $output . '</info>');
});
desc('Execute artisan db:seed');
task('artisan:db:seed', function () {
   $output = run('{{bin/php}} {{release_path}}/artisan db:seed --force');
   writeln('<info>' . $output . '</info>');
});
desc('Execute artisan cache:clear');
task('artisan:cache:clear', function () {
   run('{{bin/php}} {{release_path}}/artisan cache:clear');
});
desc('Execute artisan config:cache');
task('artisan:config:cache', function () {
   run('{{bin/php}} {{release_path}}/artisan config:cache');
});
desc('Execute artisan route:cache');
task('artisan:route:cache', function () {
   run('{{bin/php}} {{release_path}}/artisan route:cache');
});
desc('Execute artisan view:clear');
task('artisan:view:clear', function () {
   run('{{bin/php}} {{release_path}}/artisan view:clear');
});
desc('Execute artisan optimize');
task('artisan:optimize', function () {
   $deprecatedVersion = 5.6;
   $currentVersion = get('laravel_version');
   if (version_compare($currentVersion, $deprecatedVersion, '<')) {
      run('{{bin/php}} {{release_path}}/artisan optimize');
   }
});
desc('Execute artisan queue:restart');
task('artisan:queue:restart', function () {
   run('{{bin/php}} {{release_path}}/artisan queue:restart');
});
desc('Execute artisan storage:link');
task('artisan:storage:link', function () {
   $needsVersion = 5.5;
   $currentVersion = get('laravel_version');
   if (version_compare($currentVersion, $needsVersion, '>=')) {
      run('{{bin/php}} {{release_path}}/artisan storage:link');
   }
});

task('deploy:update_code', function () {
   $tag = get('tag');
   if (empty($tag)) {
      throw new \Exception("No release tag specified to deploy!");
   }
   writeln("About to get sources from tags/{{tag}}");
   run("git clone --depth 1 --branch {{branch}} {{repository}} {{release_path}}");
   run("cd {{release_path}} && git fetch --tags && git checkout tags/{{tag}}");
})->desc('Updating code from git repository');

task('status', function () {
   writeln("latest release tag: {{tag}}");
})->desc('Show status of custom deploy features');

// [Optional] If deploy fails automatically unlock.
after('deploy:failed', 'deploy:unlock');

/**
 * Task deploy:public_disk support the public disk.
 * To run this task automatically, please add below line to your deploy.php file
 *
 *     before('deploy:symlink', 'deploy:public_disk');
 *
 * @see https://laravel.com/docs/5.2/filesystem#configuration
 */
desc('Make symlink for public disk');
task('deploy:public_disk', function () {
   // Remove from source.
   run('if [ -d $(echo {{release_path}}/public/storage) ]; then rm -rf {{release_path}}/public/storage; fi');
   // Create shared dir if it does not exist.
   run('mkdir -p {{deploy_path}}/shared/storage/app/public');
   // Symlink shared dir to release dir
   run('{{bin/symlink}} {{deploy_path}}/shared/storage/app/public {{release_path}}/public/storage');
});
/**
 * Main task
 */
desc('Deploy your project');
task('deploy', [
   'deploy:info',
   'deploy:prepare',
   'deploy:lock',
   'deploy:release',
   'deploy:update_code',
   'deploy:shared',
   'deploy:vendors',
   'deploy:writable',
   'artisan:storage:link',
   'artisan:view:clear',
   'artisan:cache:clear',
   'artisan:config:cache',
   'artisan:optimize',
   'deploy:symlink',
   'deploy:unlock',
   'cleanup',
]);
after('deploy', 'success');
